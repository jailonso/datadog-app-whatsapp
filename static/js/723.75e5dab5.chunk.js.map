{"version":3,"file":"static/js/723.75e5dab5.chunk.js","mappings":"gNAKe,SAASA,IACpB,IAAMC,GAASC,EAAAA,EAAAA,SCJO,SAACD,GAEvBA,EAAOE,OAAOC,GAAGC,EAAAA,UAAAA,cAAwB,WACrCC,QAAQC,IAAI,aACf,IAEDN,EAAOE,OAAOC,GAAGC,EAAAA,UAAAA,cAAwB,WACrCC,QAAQC,IAAI,UACf,IAEDN,EAAOE,OAAOC,GAAGC,EAAAA,UAAAA,aAAuB,SAAAG,GACpCF,QAAQC,IAAR,4BAAiCC,EAAWC,KAC/C,IAGDR,EAAOE,OAAOO,SAAS,sBAAsB,SAACC,GAC1CL,QAAQC,IAAR,0CAA+CI,EAA/C,UACH,GACJ,CDbGC,CAAWX,GELmB,SAACA,GAE/BA,EAAOY,kBAAkBC,WAAU,YAAiB,IAAdC,EAAa,EAAbA,OAClC,MAAO,CACHC,MAAO,CACH,CACIC,KAAK,iDAAD,OAAmDF,EAAOP,WAAWU,KAArE,KACJC,WAAYC,EAAAA,aAAAA,KACZX,IAAK,YACLY,MAAM,cAAD,OAAgBN,EAAOP,WAAWU,KAAlC,YACLI,MAAO,GAEX,CACIH,WAAYC,EAAAA,aAAAA,MAEZX,IAAK,oBACLY,MAAM,mBACNC,MAAO,IAItB,IAIDrB,EAAOE,OAAOC,GAAGC,EAAAA,UAAAA,2BAAqC,SAAAkB,GACrB,sBAAzBA,EAAQC,SAASf,KACjBR,EAAOwB,UAAUC,KACb,CACIjB,IAAK,+BACLkB,OAAQ,SAEZ,CACIC,QACI,iEAInB,GACJ,CFjCGC,CAAmB5B,GGAc,SAACA,GAElCA,EAAO6B,UAAUC,QAAQjB,WAAU,WAC/B,MAAO,CACHE,MAAO,CACH,CACIG,WAAYC,EAAAA,aAAAA,KACZH,KAAM,qBACNI,MAAO,iBACPZ,IAAK,OACLa,OAAQ,IAIvB,IAEDrB,EAAOE,OAAOC,GAAGC,EAAAA,UAAAA,4BAAsC,SAAAkB,GACtB,sBAAzBA,EAAQC,SAASf,KACjBR,EAAO+B,MAAMN,KAAK,CACdO,YAAa,MACbC,YAAa,YACbC,MAAO,iBACP1B,IAAK,qBACL2B,YAAaC,EAAAA,iBAAAA,OACbT,QAAS,8BAKY,sBAAzBL,EAAQC,SAASf,KACjBR,EAAO+B,MAAMN,KACT,CACIjB,IAAK,eACL6B,KAAMC,EAAAA,UAAAA,MACNZ,OAAQ,SAEZ,CACIC,QACI,wEACJY,QAASjB,EAAQR,OAAOP,WAAWgC,UAMlB,sBAAzBjB,EAAQC,SAASf,MACjBH,QAAQC,IAAI,eAAgBgB,GAC5BtB,EAAOwB,UAAUC,KACb,CACIjB,IAAK,+BACLkB,OAAQ,QACRQ,MAAO,oBAEX,CACIP,QACI,wEACJY,QAASjB,EAAQR,OAAOP,WAAWgC,UAIlD,IAGDvC,EAAOE,OAAOC,GAAGC,EAAAA,UAAAA,0BAAoC,SAAAkB,GACpB,sBAAzBA,EAAQC,SAASf,KACjBR,EAAO+B,MAAMN,KAAK,CACdO,YAAa,MACbC,YAAa,YACbC,MAAO,iBACP1B,IAAK,qBACL2B,YAAaC,EAAAA,iBAAAA,OACbT,QAAS,8BAKY,sBAAzBL,EAAQC,SAASf,KACjBR,EAAO+B,MAAMN,KACT,CACIjB,IAAK,eACL6B,KAAMC,EAAAA,UAAAA,MACNZ,OAAQ,SAEZ,CACIC,QACI,iEAMa,sBAAzBL,EAAQC,SAASf,MACjBH,QAAQC,IAAI,eAAgBgB,GAC5BtB,EAAOwB,UAAUC,KACb,CACIjB,IAAK,+BACLkB,OAAQ,QACRQ,MAAO,oBAEX,CACIP,QACI,iEAInB,GACJ,CHzGGa,CAAsBxC,GAEtB,IAAMyC,EAAOC,SAASC,eAAe,QAChCF,IAGLA,EAAKG,UAAL,+KAMH,C","sources":["controller/index.ts","controller/modal.ts","controller/widget-ctx-menu.ts","controller/dashboard-cog-menu.ts"],"sourcesContent":["import { init } from '@datadog/ui-extensions-sdk';\nimport { setupModal } from './modal';\nimport { setupWidgetCtxMenu } from './widget-ctx-menu';\nimport { setupDashboardCogMenu } from './dashboard-cog-menu';\n\nexport default function setup() {\n    const client = init();\n    setupModal(client);\n    setupWidgetCtxMenu(client);\n    setupDashboardCogMenu(client);\n\n    const root = document.getElementById('root');\n    if (!root) {\n        return;\n    }\n    root.innerHTML = `\n    <div>\n      The application controller is running in the background.\n    </div>\n    <a href='http://localhost:3000/widget'> Click here to open your widget </a>\n  `;\n}\n","import { DDClient, EventType } from '@datadog/ui-extensions-sdk';\n\nexport const setupModal = (client: DDClient) => {\n    // listen for modal events\n    client.events.on(EventType.MODAL_ACTION, () => {\n        console.log('Confirmed!');\n    });\n\n    client.events.on(EventType.MODAL_CANCEL, () => {\n        console.log('Denied!');\n    });\n\n    client.events.on(EventType.MODAL_CLOSE, definition => {\n        console.log(`User exited modal ${definition.key}`);\n    });\n\n    // listen for a custom event sent from modal IFrame\n    client.events.onCustom('modal_button_click', (count: number) => {\n        console.log(`The user has clicked the button ${count} times`);\n    });\n};\n","import { MenuItemType, EventType, DDClient } from '@datadog/ui-extensions-sdk';\n\nexport const setupWidgetCtxMenu = (client: DDClient) => {\n    // provide widget context menu items dynamically\n    client.widgetContextMenu.onRequest(({ widget }) => {\n        return {\n            items: [\n                {\n                    href: `https://docs.datadoghq.com/dashboards/widgets/${widget.definition.type}/`,\n                    actionType: MenuItemType.LINK,\n                    key: 'link-item',\n                    label: `Read about ${widget.definition.type} widgets`,\n                    order: 3\n                },\n                {\n                    actionType: MenuItemType.EVENT,\n                    // this key is used below to determine which action to take upon click\n                    key: 'sidepanel-trigger',\n                    label: `Open a sidepanel`,\n                    order: 1\n                }\n            ]\n        };\n    });\n\n    // listen for ctx menu click events\n\n    client.events.on(EventType.WIDGET_CONTEXT_MENU_CLICK, context => {\n        if (context.menuItem.key === 'sidepanel-trigger') {\n            client.sidePanel.open(\n                {\n                    key: 'custom-panel-from-controller',\n                    source: 'panel'\n                },\n                {\n                    message:\n                        'Hi! I was sent here from the widget context menu ðŸ‘‹'\n                }\n            );\n        }\n    });\n};\n","import {\n    DDClient,\n    EventType,\n    ModalSize,\n    ModalActionLevel,\n    MenuItemType\n} from '@datadog/ui-extensions-sdk';\n\nexport const setupDashboardCogMenu = (client: DDClient) => {\n    // provide cog menu items dynamically if needed\n    client.dashboard.cogMenu.onRequest(() => {\n        return {\n            items: [\n                {\n                    actionType: MenuItemType.LINK,\n                    href: 'https://google.com',\n                    label: 'link to google',\n                    key: 'link',\n                    order: -1\n                }\n            ]\n        };\n    });\n\n    client.events.on(EventType.WIDGET_SETTINGS_MENU_CLICK, context => {\n        if (context.menuItem.key === 'open-confirmation') {\n            client.modal.open({\n                actionLabel: 'Yes',\n                cancelLabel: 'Nevermind',\n                title: 'Please verify!',\n                key: 'confirmation-modal',\n                actionLevel: ModalActionLevel.DANGER,\n                message: 'Are you sure really sure?'\n            });\n        }\n\n        // open an iframe modal defined inline here in controller\n        if (context.menuItem.key === 'open-custom-modal') {\n            client.modal.open(\n                {\n                    key: 'custom-modal',\n                    size: ModalSize.LARGE,\n                    source: 'modal'\n                },\n                {\n                    message:\n                        'Hi! I was sent here from the custom widget settings menu ðŸ‘‹',\n                    options: context.widget.definition.options\n                }\n            );\n        }\n\n        // open an iframe side panel defined inline here in controller\n        if (context.menuItem.key === 'open-custom-panel') {\n            console.log('xxxx context', context);\n            client.sidePanel.open(\n                {\n                    key: 'custom-panel-from-controller',\n                    source: 'panel',\n                    title: 'Custom Sidepanel'\n                },\n                {\n                    message:\n                        'Hi! I was sent here from the custom widget settings menu ðŸ‘‹',\n                    options: context.widget.definition.options\n                }\n            );\n        }\n    });\n\n    // listen for cog menu click events\n    client.events.on(EventType.DASHBOARD_COG_MENU_CLICK, context => {\n        if (context.menuItem.key === 'open-confirmation') {\n            client.modal.open({\n                actionLabel: 'Yes',\n                cancelLabel: 'Nevermind',\n                title: 'Please verify!',\n                key: 'confirmation-modal',\n                actionLevel: ModalActionLevel.DANGER,\n                message: 'Are you sure really sure?'\n            });\n        }\n\n        // open an iframe modal defined inline here in controller\n        if (context.menuItem.key === 'open-custom-modal') {\n            client.modal.open(\n                {\n                    key: 'custom-modal',\n                    size: ModalSize.LARGE,\n                    source: 'modal'\n                },\n                {\n                    message:\n                        'Hi! I was sent here from the dashboard cog menu ðŸ‘‹'\n                }\n            );\n        }\n\n        // open an iframe side panel defined inline here in controller\n        if (context.menuItem.key === 'open-custom-panel') {\n            console.log('xxxx context', context);\n            client.sidePanel.open(\n                {\n                    key: 'custom-panel-from-controller',\n                    source: 'panel',\n                    title: 'Custom Sidepanel'\n                },\n                {\n                    message:\n                        'Hi! I was sent here from the dashboard cog menu ðŸ‘‹'\n                }\n            );\n        }\n    });\n};\n"],"names":["setup","client","init","events","on","EventType","console","log","definition","key","onCustom","count","setupModal","widgetContextMenu","onRequest","widget","items","href","type","actionType","MenuItemType","label","order","context","menuItem","sidePanel","open","source","message","setupWidgetCtxMenu","dashboard","cogMenu","modal","actionLabel","cancelLabel","title","actionLevel","ModalActionLevel","size","ModalSize","options","setupDashboardCogMenu","root","document","getElementById","innerHTML"],"sourceRoot":""}