{"version":3,"file":"ui-extensions-react.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,8BAA+BA,QAAQ,UAC/C,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,6BAA8B,SAAUJ,GACtB,iBAAZC,QACdA,QAAkB,SAAID,EAAQG,QAAQ,8BAA+BA,QAAQ,UAE7EJ,EAAe,SAAIC,EAAQD,EAAK,8BAA+BA,EAAY,OAR7E,CASGO,MAAM,SAASC,EAAkCC,GACpD,O,6aCVA,WACA,YACA,YACA,YACA,a,qnBCJA,gBACA,YAiIS,EAAAC,WArET,SACIC,GAEA,IAAMC,EAqBV,SAAkCD,GACxB,MAAwBE,EAAMC,SAAkB,CAClDC,KAAM,iBADHC,EAAO,KAAEC,EAAU,KAyC1B,OArCAJ,EAAMK,WAAU,WAIZ,IAAIC,GAAqB,EAEzBR,EACKS,aACAC,MAAK,SAACC,GACCH,GAIJF,EAAW,CAAEF,KAAM,cAAeC,QAASM,OAE9CC,OAAM,SAACC,GACAL,GAIJF,EAAW,CAAEF,KAAM,oBAAqBS,MAAK,OAGrD,IAAMC,EAA2Bd,EAAOe,OAAOC,GAC3CC,EAAgBC,UAAUC,gBAC1B,SAACR,GACGL,EAAW,CAAEF,KAAM,cAAeC,QAASM,OAInD,OAAO,WAEHH,GAAY,EACZM,OAEL,CAACd,IAEGK,EA/DQe,CAAyBpB,GACxC,OAAQC,EAAOG,MACX,IAAK,oBAML,IAAK,eACD,OAJJ,IAAK,cACD,OAAOH,EAAOI,W,2GCpE1B,aAmDS,EAAAgB,6BAnBT,SACIrB,EACAsB,GAcA,OAZoC,IAAAC,uBAChCvB,EACAsB,GACA,SAACE,GACG,GAAyB,kBAAdA,EAIX,OAAOA,O,0GC5CnB,aAmDS,EAAAC,4BAnBT,SACIzB,EACAsB,GAcA,OAZmC,IAAAC,uBAC/BvB,EACAsB,GACA,SAACE,GACG,GAAyB,iBAAdA,EAIX,OAAOA,O,ioBC7CnB,gBAEA,WAyES,EAAAD,sBA3BT,SACIvB,EACAsB,EACAI,G,MAEMrB,EAAUN,EAAWA,WAAWC,GAChC,EAAsBE,EAAMC,WAA3BwB,EAAM,KAAEC,EAAS,KAkBxB,OAhBA1B,EAAMK,WAAU,W,QACZ,GAAe,MAAXF,EAAJ,CAIA,IAAMwB,EACgC,QAAlC,EAAc,QAAd,EAAAxB,EAAQyB,cAAM,eAAEC,WAAWC,eAAO,eAAGV,GACzC,GAAqB,MAAjBO,EAAJ,CAKA,IAAMI,EAASP,EAAOG,GACtBD,EAAUK,QALNL,OAAUM,MAMf,CAAC7B,EAAwB,QAAf,EAAAA,MAAAA,OAAO,EAAPA,EAASyB,cAAM,eAAEC,WAAWC,QAASV,EAAYI,IAEvDC,I,+nBCxEX,gBAEA,WAwES,EAAAQ,oBAvBT,SACInC,EACAoC,G,MAEM/B,EAAUN,EAAWA,WAAWC,GAChC,EAA0BE,EAAMC,WAA/BkC,EAAQ,KAAEC,EAAW,KAe5B,OAbApC,EAAMK,WAAU,W,QACNgC,EAAoD,QAAhC,EAAkB,QAAlB,EAAAlC,MAAAA,OAAO,EAAPA,EAASmC,iBAAS,eAAEC,oBAAY,QAAI,GACxDC,EAxDd,SACIN,EACAG,GAEA,IAAMI,EAAmBJ,EAAkBK,MACvC,SAACF,GACG,OAAOA,EAAMG,OAAST,KAI9B,GAA+B,OAA3BO,MAAAA,OAAgB,EAAhBA,EAAkBD,OAItB,OAAOC,EAAiBD,MA0CNI,CACVV,EACAG,GAES,MAATG,GAIJJ,EAAYI,KACb,CAAmB,QAAlB,EAAArC,MAAAA,OAAO,EAAPA,EAASmC,iBAAS,eAAEC,aAAcL,IAE/BC,I,gBCxEX7C,EAAOD,QAAUM,G,gBCAjBL,EAAOD,QAAUO,ICCbiD,EAA2B,G,OAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBf,IAAjBgB,EACH,OAAOA,EAAa3D,QAGrB,IAAIC,EAASuD,EAAyBE,GAAY,CAGjD1D,QAAS,IAOV,OAHA4D,EAAoBF,GAAUG,KAAK5D,EAAOD,QAASC,EAAQA,EAAOD,QAASyD,GAGpExD,EAAOD,QClBWyD,CAAoB,K","sources":["webpack://DD_REACT/webpack/universalModuleDefinition","webpack://DD_REACT/./src/index.ts","webpack://DD_REACT/./src/use-context.ts","webpack://DD_REACT/./src/use-custom-widget-option-boolean.ts","webpack://DD_REACT/./src/use-custom-widget-option-string.ts","webpack://DD_REACT/./src/use-custom-widget-option.ts","webpack://DD_REACT/./src/use-template-variable.ts","webpack://DD_REACT/external umd \"@datadog/ui-extensions-sdk\"","webpack://DD_REACT/external umd \"react\"","webpack://DD_REACT/webpack/bootstrap","webpack://DD_REACT/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@datadog/ui-extensions-sdk\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@datadog/ui-extensions-sdk\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DD_REACT\"] = factory(require(\"@datadog/ui-extensions-sdk\"), require(\"react\"));\n\telse\n\t\troot[\"DD_REACT\"] = factory(root[\"@datadog/ui-extensions-sdk\"], root[\"react\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__669__, __WEBPACK_EXTERNAL_MODULE__156__) {\nreturn ","export * from './use-context';\nexport * from './use-custom-widget-option';\nexport * from './use-custom-widget-option-boolean';\nexport * from './use-custom-widget-option-string';\nexport * from './use-template-variable';\n","import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\nimport * as React from 'react';\n\n/**\n * This represents the different states the {@link uiExtensionsSDK.Context} can be in.\n */\ntype Context =\n    | ContextHandshakeFailure\n    | ContextInitialized\n    | ContextInitializing;\n\n/**\n * There was some kind of failure with the handshake.\n * There's no useful {@link uiExtensionsSDK.Context}, but there is an error.\n */\ntype ContextHandshakeFailure = { type: 'handshake failure'; error: unknown };\n\n/**\n * The handshake is still being preformed.\n * There's no useful {@link uiExtensionsSDK.Context} yet.\n */\ntype ContextInitializing = { type: 'initializing' };\n\n/**\n * The handshake has succeeded and there is a {@link uiExtensionsSDK.Context} that can be used.\n */\ntype ContextInitialized = {\n    type: 'initialized';\n    context: uiExtensionsSDK.Context;\n};\n\n/**\n * Returns a {@link uiExtensionsSDK.Context}.\n * Will be updated whenever the {@link uiExtensionsSDK.Context} changes.\n *\n * This hook abstracts away the intricacies of keeping the {@link uiExtensionsSDK.Context} up to date.\n *\n * @param client An initialized {@link uiExtensionsSDK.DDClient}.\n * This should be the result of invoking {@link uiExtensionsSDK.init}.\n * @returns The {@link uiExtensionsSDK.Context}, if it exists.\n *\n * @example\n * This can be used like:\n * ```TypeScript\n * import * as uiExtensionsReact from '@datadog/ui-extensions-react';\n * import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\n * import * as React from 'react';\n *\n * const client = uiExtensionsSDK.init();\n *\n * const Widget: React.FunctionComponent = () => {\n *      const context = uiExtensionsReact.useContext(client)\n *      if (context == null) {\n *          return <p>Initializing</p>;\n *      }\n *\n *      const colorTheme: uiExtensionsSDK.ColorTheme = context.app.currentUser.colorTheme;\n *      return <p>Widget is ready! Color theme: {colorTheme}</p>;\n * }\n * ```\n */\nfunction useContext(\n    client: uiExtensionsSDK.DDClient\n): uiExtensionsSDK.Context | undefined {\n    const result = useContextImplementation(client);\n    switch (result.type) {\n        case 'handshake failure':\n            return undefined;\n\n        case 'initialized':\n            return result.context;\n\n        case 'initializing':\n            return undefined;\n    }\n}\n\n/**\n * The low-level implementation of the {@link useContext} hook.\n * This only exists to make it a bit clearer to understand how we deal with the different states.\n *\n * @param client An initialized {@link uiExtensionsSDK.DDClient}.\n * This should be the result of invoking {@link uiExtensionsSDK.init}.\n * @returns The state of the {@link uiExtensionsSDK.Context}.\n */\nfunction useContextImplementation(client: uiExtensionsSDK.DDClient): Context {\n    const [context, setContext] = React.useState<Context>({\n        type: 'initializing'\n    });\n\n    React.useEffect(() => {\n        // Since we're dealing with promises,\n        // we need some way to track whether or not to make a state change.\n        // We keep track of whether or not we're still mounted.\n        let unMounted: boolean = false;\n\n        client\n            .getContext()\n            .then((newContext: uiExtensionsSDK.Context): void => {\n                if (unMounted) {\n                    return;\n                }\n\n                setContext({ type: 'initialized', context: newContext });\n            })\n            .catch((error: unknown): void => {\n                if (unMounted) {\n                    return;\n                }\n\n                setContext({ type: 'handshake failure', error });\n            });\n\n        const unsubscribeContextChange = client.events.on(\n            uiExtensionsSDK.EventType.CONTEXT_CHANGE,\n            (newContext: uiExtensionsSDK.Context): void => {\n                setContext({ type: 'initialized', context: newContext });\n            }\n        );\n\n        return () => {\n            // We flip the flag to let any in-flight promises know we're unmounted.\n            unMounted = true;\n            unsubscribeContextChange();\n        };\n    }, [client]);\n\n    return context;\n}\n\nexport { useContext };\n","import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\n\nimport { useCustomWidgetOption } from './use-custom-widget-option';\n\n/**\n * Returns the current value of a single custom widget option that is expected to be a {@link boolean}.\n * This will be updated whenever the options change.\n *\n * This hook abstracts away the intricacies of keeping up to date with an option.\n *\n * @param client An initialized {@link uiExtensionsSDK.DDClient}. This should be the result of invoking {@link uiExtensionsSDK.init}.\n * @param optionName The option name to look for.\n * @returns The option value (if it exists).\n *\n * @example\n * This hook can be used like:\n * ```TypeScript\n * import * as uiExtensionsReact from '@datadog/ui-extensions-react';\n * import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\n * import * as React from 'react';\n *\n * const client = uiExtensionsSDK.init();\n *\n * const CustomWidget: React.FunctionComponent = () => {\n *     const verbose = uiExtensionsReact.useCustomWidgetOptionBoolean(client, 'verbose');\n *\n *     if (verbose == null) {\n *         return <p>Please decide on verbosity</p>;\n *     } else {\n *         return <p>Verbose: {verbose}</p>;\n *     }\n * }\n * ```\n */\nfunction useCustomWidgetOptionBoolean(\n    client: uiExtensionsSDK.DDClient,\n    optionName: string\n): boolean | undefined {\n    const option: boolean | undefined = useCustomWidgetOption(\n        client,\n        optionName,\n        (newOption: string | boolean): boolean | undefined => {\n            if (typeof newOption !== 'boolean') {\n                return;\n            }\n\n            return newOption;\n        }\n    );\n\n    return option;\n}\n\nexport { useCustomWidgetOptionBoolean };\n","import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\n\nimport { useCustomWidgetOption } from './use-custom-widget-option';\n\n/**\n * Returns the current value of a single custom widget option that is expected to be a {@link string}.\n * This will be updated whenever the options change.\n *\n * This hook abstracts away the intricacies of keeping up to date with an option.\n *\n * @param client An initialized {@link uiExtensionsSDK.DDClient}. This should be the result of invoking {@link uiExtensionsSDK.init}.\n * @param optionName The option name to look for.\n * @returns The option value (if it exists).\n *\n * @example\n * This hook can be used like:\n * ```TypeScript\n * import * as uiExtensionsReact from '@datadog/ui-extensions-react';\n * import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\n * import * as React from 'react';\n *\n * const client = uiExtensionsSDK.init();\n *\n * const CustomWidget: React.FunctionComponent = () => {\n *     const query = uiExtensionsReact.useCustomWidgetOptionString(client, 'query');\n *\n *     if (query == null) {\n *         return <p>Please set a query</p>;\n *     } else {\n *         return <p>Query: {query}</p>;\n *     }\n * }\n * ```\n */\nfunction useCustomWidgetOptionString(\n    client: uiExtensionsSDK.DDClient,\n    optionName: string\n): string | undefined {\n    const option: string | undefined = useCustomWidgetOption(\n        client,\n        optionName,\n        (newOption: string | boolean): string | undefined => {\n            if (typeof newOption !== 'string') {\n                return;\n            }\n\n            return newOption;\n        }\n    );\n\n    return option;\n}\n\nexport { useCustomWidgetOptionString };\n","import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\nimport * as React from 'react';\n\nimport * as useContext from './use-context';\n\n/**\n * Returns the current value of a single custom widget option.\n * This will be updated whenever the options change.\n *\n * This hook abstracts away the intricacies of keeping options up to date.\n *\n * @param client An initialized {@link uiExtensionsSDK.DDClient}. This should be the result of invoking {@link uiExtensionsSDK.init}.\n * @param optionName The option name to look for.\n * @param parser A function for parsing the option value.\n * @returns The option value (if it exists).\n *\n * @example\n * This hook can be used like:\n * ```TypeScript\n * import * as uiExtensionsReact from '@datadog/ui-extensions-react';\n * import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\n * import * as React from 'react';\n *\n * const client = uiExtensionsSDK.init();\n *\n * const parseInt = (option: string | boolean): number | undefined => {\n *     if (typeof option !== 'string') {\n *         return;\n *     }\n *\n *     const parsed: number = Number.parseInt(option);\n *     if (Number.isNaN(parsed)) {\n *         return;\n *     }\n *\n *     return parsed;\n * };\n *\n * const CustomWidget: React.FunctionComponent = () => {\n *     const threshold = uiExtensionsReact.useCustomWidgetOption(client, 'threshold', parseInt);\n *\n *     if (threshold == null) {\n *         return <p>Please set a threshold</p>;\n *     } else {\n *         return <p>Threshold: {threshold}</p>;\n *     }\n * }\n * ```\n */\nfunction useCustomWidgetOption<Result>(\n    client: uiExtensionsSDK.DDClient,\n    optionName: string,\n    parser: (option: string | boolean) => Result | undefined\n): Result | undefined {\n    const context = useContext.useContext(client);\n    const [option, setOption] = React.useState<Result>();\n\n    React.useEffect(() => {\n        if (context == null) {\n            return;\n        }\n\n        const initialOption: string | boolean | undefined =\n            context.widget?.definition.options?.[optionName];\n        if (initialOption == null) {\n            setOption(undefined);\n            return;\n        }\n\n        const parsed = parser(initialOption);\n        setOption(parsed);\n    }, [context, context?.widget?.definition.options, optionName, parser]);\n\n    return option;\n}\n\nexport { useCustomWidgetOption };\n","import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\nimport * as React from 'react';\n\nimport * as useContext from './use-context';\n\nfunction findTemplateVariableValue(\n    variableName: string,\n    templateVariables: uiExtensionsSDK.TemplateVariableValue[]\n): string | undefined {\n    const templateVariable = templateVariables.find(\n        (value: uiExtensionsSDK.TemplateVariableValue): boolean => {\n            return value.name === variableName;\n        }\n    );\n\n    if (templateVariable?.value == null) {\n        return;\n    }\n\n    return templateVariable.value;\n}\n\n/**\n * Returns the current value of a specific template variable.\n * This will be updated whenever the template variable changes.\n *\n * This hook abstracts away the intricacies of keeping template variables up to date.\n *\n * @param client An initialized {@link uiExtensionsSDK.DDClient}. This should be the result of invoking {@link uiExtensionsSDK.init}.\n * @param variableName The name of the template variable to get the value of.\n * @returns The value of the template variable if it exists.\n *\n * @example\n * This hook can be used like:\n * ```TypeScript\n * import * as uiExtensionsReact from '@datadog/ui-extensions-react';\n * import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';\n * import * as React from 'react';\n *\n * const client = uiExtensionsSDK.init();\n *\n * const CustomWidget: React.FunctionComponent = () => {\n *     const service = uiExtensionsReact.useTemplateVariable(client, 'service');\n *\n *     if (service == null) {\n *         return <p>Please select a service from the template variables.</p>;\n *     }\n *\n *     return <p>Service: {service}.</p>;\n * }\n * ```\n */\nfunction useTemplateVariable(\n    client: uiExtensionsSDK.DDClient,\n    variableName: string\n): string | undefined {\n    const context = useContext.useContext(client);\n    const [variable, setVariable] = React.useState<string | undefined>();\n\n    React.useEffect(() => {\n        const templateVariables = context?.dashboard?.templateVars ?? [];\n        const value = findTemplateVariableValue(\n            variableName,\n            templateVariables\n        );\n        if (value == null) {\n            return;\n        }\n\n        setVariable(value);\n    }, [context?.dashboard?.templateVars, variableName]);\n\n    return variable;\n}\n\nexport { useTemplateVariable };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__669__;","module.exports = __WEBPACK_EXTERNAL_MODULE__156__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(920);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__669__","__WEBPACK_EXTERNAL_MODULE__156__","useContext","client","result","React","useState","type","context","setContext","useEffect","unMounted","getContext","then","newContext","catch","error","unsubscribeContextChange","events","on","uiExtensionsSDK","EventType","CONTEXT_CHANGE","useContextImplementation","useCustomWidgetOptionBoolean","optionName","useCustomWidgetOption","newOption","useCustomWidgetOptionString","parser","option","setOption","initialOption","widget","definition","options","parsed","undefined","useTemplateVariable","variableName","variable","setVariable","templateVariables","dashboard","templateVars","value","templateVariable","find","name","findTemplateVariableValue","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}