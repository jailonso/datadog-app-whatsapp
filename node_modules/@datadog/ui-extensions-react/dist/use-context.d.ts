import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';
/**
 * Returns a {@link uiExtensionsSDK.Context}.
 * Will be updated whenever the {@link uiExtensionsSDK.Context} changes.
 *
 * This hook abstracts away the intricacies of keeping the {@link uiExtensionsSDK.Context} up to date.
 *
 * @param client An initialized {@link uiExtensionsSDK.DDClient}.
 * This should be the result of invoking {@link uiExtensionsSDK.init}.
 * @returns The {@link uiExtensionsSDK.Context}, if it exists.
 *
 * @example
 * This can be used like:
 * ```TypeScript
 * import * as uiExtensionsReact from '@datadog/ui-extensions-react';
 * import * as uiExtensionsSDK from '@datadog/ui-extensions-sdk';
 * import * as React from 'react';
 *
 * const client = uiExtensionsSDK.init();
 *
 * const Widget: React.FunctionComponent = () => {
 *      const context = uiExtensionsReact.useContext(client)
 *      if (context == null) {
 *          return <p>Initializing</p>;
 *      }
 *
 *      const colorTheme: uiExtensionsSDK.ColorTheme = context.app.currentUser.colorTheme;
 *      return <p>Widget is ready! Color theme: {colorTheme}</p>;
 * }
 * ```
 */
declare function useContext(client: uiExtensionsSDK.DDClient): uiExtensionsSDK.Context | undefined;
export { useContext };
