import { DDAPIClient } from '../api/api';
import { DDAuthClient } from '../auth/auth';
import { DDConfigClient } from '../config/config';
import { EventType, RequestType } from '../constants';
import { DDDashboardClient } from '../dashboard/dashboard';
import { DDEventsClient } from '../events/events';
import { DDLocationClient } from '../location/location';
import { DDModalClient } from '../modal/modal';
import { DDNotificationClient } from '../notification/notification';
import { DDSidePanelClient } from '../side-panel/side-panel';
import type { ClientOptions, Context, ContextClient, DebugClient, EventClient, EventHandler, IFrameDimensions, LoggerClient, RequestClient, RequestHandler } from '../types';
import { DDWidgetContextMenuClient } from '../widget-context-menu/widget-context-menu';
export declare class DDClient<AuthStateArgs = unknown> implements ContextClient, DebugClient, EventClient, LoggerClient, RequestClient {
    private context?;
    private readonly framePostClient;
    private readonly logger;
    api: DDAPIClient;
    dashboard: DDDashboardClient;
    debug: boolean;
    events: DDEventsClient<AuthStateArgs>;
    location: DDLocationClient;
    modal: DDModalClient;
    notification: DDNotificationClient;
    sidePanel: DDSidePanelClient;
    widgetContextMenu: DDWidgetContextMenuClient;
    auth: DDAuthClient<AuthStateArgs>;
    config: DDConfigClient;
    constructor(options?: ClientOptions<AuthStateArgs>);
    log(message: string): void;
    logWarning(message: string): void;
    logError(message: string): void;
    on<T = unknown>(eventType: EventType, eventHandler: EventHandler<T>): () => void;
    onRequest<Q = unknown, R = unknown>(requestType: RequestType, requestHandler: RequestHandler<Q, R>): () => void;
    request<Q = unknown, R = unknown>(requestType: RequestType, requestData?: Q): Promise<R>;
    send<T = unknown>(eventType: EventType, eventData: T): Promise<void>;
    private registerEventListeners;
    /**
     * Notify the parent that the iframe should be resized.
     *
     * Will default any dimensions not given to the iframe's actual dimensions.
     *
     * There's no guarantee that the parent will adjust the iframe's dimensions.
     * The parent will also sanitize the dimensions attempting to keep the iframe within the viewport.
     */
    resize(dimensions?: Partial<IFrameDimensions>): void;
    /**
     * Returns app context data, after it is sent from the parent
     */
    getContext(): Promise<Context>;
    private syncDebugMode;
}
