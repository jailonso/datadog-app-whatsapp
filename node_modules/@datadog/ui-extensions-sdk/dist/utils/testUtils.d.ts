/// <reference types="jest" />
import { EventType, RequestType } from '../constants';
import { Context, ContextClient, DebugClient, EventClient, EventHandler, LoggerClient, RequestClient, RequestHandler } from '../types';
import { Logger } from './logger';
export interface Deferred<T> {
    resolve: (t: T) => void;
    reject: (t: T) => void;
    promise: Promise<T>;
}
/**
 * Creates a defferred object, including promise and resolve + reject methods to be executed later
 */
export declare const defer: <T>() => Deferred<T>;
export declare const uniqueInt: () => number;
export declare const mockContext: Context;
export declare class MockFramePostChildClient {
    context: Deferred<any>;
    subscriptions: {
        [ev: string]: {
            [od: string]: (data?: any) => any;
        };
    };
    requestSubscriptions: {
        [reqKey: string]: (data?: any) => any;
    };
    sendCallBack?: jest.Mock;
    constructor();
    init(override?: any, sendCallBack?: jest.Mock): void;
    getContext(): Promise<any>;
    handshake(): Promise<any>;
    on(eventType: string, handler: (arg?: any) => any): () => void;
    send(eventType: string, data: any): void;
    mockEvent(eventType: string, data: any): void;
    request(eventType: string, data: any): any;
    onRequest(requestKey: string, requestHandler: (arg?: any) => any): () => boolean;
    mockRequest(requestKey: string, data?: any): any;
}
export declare const flushPromises: () => Promise<void>;
export declare class MockClient implements ContextClient, DebugClient, EventClient, LoggerClient, RequestClient {
    framePostClient: MockFramePostChildClient;
    logger: Logger;
    debug: boolean;
    constructor();
    getContext(): Promise<any>;
    log(message: string): void;
    logWarning(message: string): void;
    logError(message: string): void;
    on<T = unknown>(eventType: EventType, eventHandler: EventHandler<T>): () => void;
    onRequest<Q = unknown, R = unknown>(requestType: RequestType, requestHandler: RequestHandler<Q, R>): () => void;
    request<Q = unknown, R = unknown>(requestType: RequestType, requestData?: Q): Promise<R>;
    send<T = unknown>(eventType: EventType, eventData: T): Promise<void>;
}
