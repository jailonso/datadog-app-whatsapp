import type { ColorTheme, EventType, FeatureType, MenuItemType, ModalActionLevel, ModalSize, RequestType, WidgetOptionItemType } from './constants';
export interface ContextClient {
    getContext(): Promise<Context>;
}
export interface DebugClient {
    debug: boolean;
}
export interface EventClient {
    on<T = unknown>(eventType: EventType, eventHandler: EventHandler<T>): () => void;
    send<T = unknown>(eventType: EventType, eventData: T): Promise<void>;
}
export interface LoggerClient {
    log(message: string): void;
    logWarning(message: string): void;
    logError(message: string): void;
}
export interface RequestClient {
    onRequest<Q = unknown, R = unknown>(requestType: RequestType, requestHandler: RequestHandler<Q, R>): () => void;
    request<Q = unknown, R = unknown>(requestType: RequestType, requestData?: Q): Promise<R>;
}
export declare type RequestHandler<Q = unknown, R = unknown> = (requestData: Q) => R;
export interface ClientOptions<AuthStateArgs = unknown> {
    debug?: boolean;
    host?: string;
    authProvider?: AuthStateOptions<AuthStateArgs>;
}
export declare type EventHandler<T = unknown> = (data: T) => void;
export interface HandleEventParams<T = unknown> {
    eventType: EventType;
    data: T;
}
export interface AppContext {
    currentUser: {
        timeZone: string;
        colorTheme: ColorTheme;
    };
    features: FeatureType[];
    debug: boolean;
}
export interface TemplateVariableValue {
    name: string;
    value: string;
    prefix?: string;
    default?: string;
}
export interface Timeframe {
    start: number;
    end: number;
    isLive: boolean;
}
export interface DashboardContext {
    id: string;
    shareURL: string;
    timeframe: Timeframe;
    templateVars: TemplateVariableValue[];
}
export interface DashboardWidgetContext {
    id?: number;
    definition: CustomWidgetDefinition | any;
    layout?: any;
}
export interface WidgetInteractionContext {
    groupTags: string[];
}
export interface MenuItemContext {
    key: string;
}
export interface FeatureContext {
    dashboard?: DashboardContext;
    widget?: DashboardWidgetContext;
    menuItem?: MenuItemContext;
    widgetInteraction?: WidgetInteractionContext;
    args?: unknown;
}
export interface Context extends FeatureContext {
    app: AppContext;
}
export interface ClientContext {
    sdkVersion: string;
    authStateOptions?: ParentAuthStateOptions;
}
export interface Feature {
    type: FeatureType;
    events: EventType[];
}
export declare type ApiRequestMethod = 'GET' | 'PUT' | 'POST' | 'PATCH' | 'DELETE';
export declare type ApiRequestContentType = 'json' | 'urlencoded' | 'formdata';
export interface ApiRequestOptions<Q> {
    method?: ApiRequestMethod;
    params?: Record<string, string>;
    contentType?: ApiRequestContentType;
    data?: Q;
}
export interface ApiRequest<Q> extends ApiRequestOptions<Q> {
    resource: string;
}
export interface DefinitionWithKey {
    key: string;
}
export interface MenuItemCommon extends DefinitionWithKey, OrderedItem {
    label: string;
}
export interface LinkMenuItem extends MenuItemCommon {
    actionType: MenuItemType.LINK;
    href: string;
}
export interface EventMenuItem extends MenuItemCommon {
    actionType: MenuItemType.EVENT;
}
export declare type MenuItem = LinkMenuItem | EventMenuItem;
export interface MenuItemRequestResponse {
    items: MenuItem[];
}
export interface ModalDefinition extends DefinitionWithKey {
    title?: string;
    size?: ModalSize;
    message?: string;
    source?: string;
    actionLabel?: string;
    actionLevel?: ModalActionLevel;
    cancelLabel?: string;
}
export interface SidePanelDefinition extends DefinitionWithKey {
    title?: string;
    source?: string;
}
export declare type WidgetContextMenuClickData = RequireKeys<FeatureContext, 'widget' | 'widgetInteraction' | 'menuItem'>;
export declare type GetWidgetContextMenuItemsRequest = RequireKeys<FeatureContext, 'widget' | 'widgetInteraction'>;
export interface GetWidgetContextMenuItemsResponse extends MenuItemRequestResponse {
}
export declare type DashboardCogMenuClickData = RequireKeys<FeatureContext, 'dashboard' | 'menuItem'>;
export declare type GetDashboardCogMenuItemsRequest = RequireKeys<FeatureContext, 'dashboard'>;
export interface GetDashboardCogMenuItemsResponse extends MenuItemRequestResponse {
}
export interface AuthState<Args = unknown> {
    args?: Args;
    isAuthenticated: boolean;
}
export interface AuthStateOptionsPollResolution {
    retryInterval?: number;
}
export interface AuthStateOptionsMessageResolution {
    resolution: 'message';
}
export interface AuthStateOptionsCloseResolution {
    resolution: 'close';
}
export declare type ParentAuthStateOptions = {
    url: string;
    totalTimeout?: number;
    requestTimeout?: number;
} & (AuthStateOptionsPollResolution | AuthStateOptionsMessageResolution | AuthStateOptionsCloseResolution);
export declare type AuthStateOptions<AuthStateArgs = unknown> = ParentAuthStateOptions & {
    authStateCallback: () => Promise<AuthState<AuthStateArgs> | boolean> | AuthState<AuthStateArgs> | boolean;
};
interface WidgetOptionEnum {
    label: string;
    value: string;
}
export interface WidgetOptionItemBase extends OrderedItem {
    label: string;
    name: string;
    required?: boolean;
    loading?: boolean;
}
export interface WidgetOptionItemBoolean extends WidgetOptionItemBase {
    type: WidgetOptionItemType.BOOLEAN;
    default?: boolean;
}
export interface WidgetOptionItemString extends WidgetOptionItemBase {
    type: WidgetOptionItemType.STRING;
    default?: string;
    enum?: (string | WidgetOptionEnum)[];
}
export declare type WidgetOptionItem = WidgetOptionItemBoolean | WidgetOptionItemString;
export interface WidgetSettingsMenuClickData extends RequireKeys<FeatureContext, 'widget' | 'menuItem'> {
    widget: Omit<DashboardWidgetContext, 'definition'> & {
        definition: CustomWidgetDefinition;
    };
}
export interface CustomWidgetDefinition {
    options?: {
        [key: string]: string | boolean;
    };
    custom_widget_key: string;
}
export interface CustomWidgetItem {
    name: string;
    source: string;
    options: WidgetOptionItem[];
    customWidgetKey: string;
    icon?: string;
}
export interface APIAccessChangeEvent {
    isAuthorized: boolean;
}
export interface OrderedItem {
    order?: number;
}
export interface IFrameDimensions {
    height: number;
    width: number;
}
/**
 * Typescript utility type, takes an interface and makes the specified keys required
 * Example: RequireKeys<MyType, 'a' | 'b'>
 */
declare type RequireKeys<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: T[P];
};
export declare type NotificationLevel = 'success' | 'warning' | 'danger';
export interface NotificationDefinition {
    label: string;
    level?: NotificationLevel;
}
export interface DeprecatedEventUsage {
    entity: 'event';
    eventType: EventType;
}
export declare type DeprecatedUsage = DeprecatedEventUsage;
export interface LoadedResourceMetadata {
    startTimeTs: number;
    secureConnectionStartTs: number;
    url?: string;
    urlHostname: string;
    initiatorType: string;
    nextHopProtocol: string;
    duration: number;
    decodedBodySize: number;
}
export interface LoadedResourceMetaDataBatch {
    resources: LoadedResourceMetadata[];
}
export interface OrgConfig {
    [key: string]: string | boolean;
}
export {};
