import { EventType } from '../constants';
import type { APIAccessChangeEvent, AuthState, Context, ContextClient, DashboardCogMenuClickData, EventClient, EventHandler, IFrameDimensions, LoggerClient, ModalDefinition, RequestClient, SidePanelDefinition, TemplateVariableValue, Timeframe, WidgetContextMenuClickData, WidgetSettingsMenuClickData } from '../types';
interface DDEventDataTypes<AuthStateArgs> {
    [EventType.CUSTOM_EVENT]: CustomEventPayload<any>;
    [EventType.CONTEXT_CHANGE]: Context;
    [EventType.RESIZE_IFRAME]: IFrameDimensions;
    [EventType.DASHBOARD_COG_MENU_CLICK]: DashboardCogMenuClickData;
    [EventType.WIDGET_CONTEXT_MENU_CLICK]: WidgetContextMenuClickData;
    [EventType.WIDGET_SETTINGS_MENU_CLICK]: WidgetSettingsMenuClickData;
    [EventType.MODAL_CLOSE]: ModalDefinition;
    [EventType.MODAL_CANCEL]: ModalDefinition;
    [EventType.MODAL_ACTION]: ModalDefinition;
    [EventType.SIDE_PANEL_CLOSE]: SidePanelDefinition;
    [EventType.DASHBOARD_TIMEFRAME_CHANGE]: Timeframe;
    [EventType.DASHBOARD_CURSOR_CHANGE]: number | null;
    [EventType.DASHBOARD_TEMPLATE_VAR_CHANGE]: TemplateVariableValue[];
    [EventType.DASHBOARD_CUSTOM_WIDGET_OPTIONS_CHANGE]: {
        [key: string]: string | boolean;
    };
    [EventType.MODAL_CLOSE]: ModalDefinition;
    [EventType.MODAL_CANCEL]: ModalDefinition;
    [EventType.MODAL_ACTION]: ModalDefinition;
    [EventType.AUTH_STATE_CHANGE]: AuthState<AuthStateArgs>;
    [EventType.API_ACCESS_CHANGE]: APIAccessChangeEvent;
}
export declare class DDEventsClient<AuthStateArgs = unknown> {
    private readonly client;
    constructor(client: ContextClient & EventClient & LoggerClient & RequestClient);
    /**
     * Adds event handler to execute on a certain event type from the parent. Returns an unsubscribe
     * method. This method can be called before handshake is successful, but handlers will not execute until
     * after. Will print an error if the installed app does not have the required features to handle the event type.
     */
    on<K extends keyof DDEventDataTypes<AuthStateArgs>>(eventType: K, handler: EventHandler<DDEventDataTypes<AuthStateArgs>[K]>): () => void;
    /**
     * Adds event handler to execute on a custom event from the parent. Returns an unsubscribe
     * method. This method can be called before handshake is successful, but handlers will not execute until
     * after. Will print an error if the installed app does not have the custom_events feature enabled
     */
    onCustom<T = any>(eventType: string, handler: EventHandler<T>): () => void;
    /**
     * Broadcasts a custom event to all active iframes. Returns a list of the iframe urls that received the event
     * for debug purposes
     */
    broadcast<T = any>(eventType: string, data: T): Promise<undefined>;
    private logDeprecationWarning;
}
export interface CustomEventPayload<T> {
    eventType: string;
    data: T;
}
export {};
